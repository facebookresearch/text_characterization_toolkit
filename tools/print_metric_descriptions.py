# Copyright (c) Meta Platforms, Inc. and affiliates.

# This source code is licensed under the MIT license found in the
# LICENSE file in the root directory of this source tree.

import argparse
from collections import defaultdict
import json

from text_characterization.metrics import MetricProcessor
from text_characterization.utils import parse_filename_macros


parser = argparse.ArgumentParser()
parser.add_argument(
    "-c",
    "--config",
    default="default.json",
    help="Config File"
)
parser.add_argument(
    "--latex",
    action="store_true",
    help="Print the code for a LaTex table instead of raw text."
)

args = parser.parse_args()

with open(parse_filename_macros("<CONFIG_DIR>/" + args.config)) as config_file:
    config = json.load(config_file)

# Instatiate the metric classes without actualy loading any resources
mp = MetricProcessor(config=config, backend=None)

# Get tuples of <category, key, description>
metric_descriptions = mp.get_metric_descriptions()

# Count lines for each category
category_counts = defaultdict(int)
max_key_length = 0
for cat, key, _ in metric_descriptions:
    category_counts[cat] += 1
    if len(key) > max_key_length:
        max_key_length = len(key)

LATEX_TABLE_BEFORE = r"""
% File generated by running: python tools/print_metric_descriptions.py --latex > metrics_list.tex
\begin{table*}
\centering\small
\begin{tabular}{lll}
\toprule
 \textbf{Category} & \textbf{Metric Key} & \textbf{Description}  \\ 
 \midrule
"""

LATEX_TABLE_AFTER = r"""
\bottomrule
\end{tabular}
\caption{List of metrics currently supported by TCT}
\label{fig:metric_detailsy}
\vspace{-0.5cm}
\end{table*}
"""


if args.latex:

    print(LATEX_TABLE_BEFORE)

    rows_left_in_category = 0
    for cat, key, desc in metric_descriptions:
        if rows_left_in_category == 0:
            rows_left_in_category = category_counts[cat]
            print("\midrule")
            print(f"\multirow{{{rows_left_in_category}}}{{*}}{{{cat}}}")
        else:
            print("\cmidrule{2-3}")

        escaped_key = key.replace("_", r"\_")
        print(f"   & {escaped_key} & {desc}\\\\")
        
        rows_left_in_category -= 1

    print(LATEX_TABLE_AFTER)

else:
    rows_left_in_category = 0
    for cat, key, desc in metric_descriptions:
        if rows_left_in_category == 0:
            rows_left_in_category = category_counts[cat]
            print(f"\n\n*** {cat} ({rows_left_in_category} metrics) ***\n")

        spacing = " " * (max_key_length + 5 - len(key))
        
        print(f"{key}{spacing}{desc}")
        
        rows_left_in_category -= 1
